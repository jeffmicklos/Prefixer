import re

class CSSPrefix(object):
	"""CSS3 Prefixer"""

	units = 'px'

	def __init__(self, prop, value, units = 'px'):
		"""
		Args:
		prop - string
		value - mixed
		"""
		
		"""A class to generate CSS prefixes and cross-browser declarations.
		
		Currently the class can handle opacity, border-radius and other generic declarations.
		
		Args:
			prop - A string of a CSS property according to the W3C spec, such as border-radius, opacity, border-top-left-radius
			value - A mixed type variable that contains the property's value.
		
		Attributes:
			units - A string that defines what unit identifier to append on values (px, em, pt, %).
			
		"""
		self.declaration = ''
		self.units = units
		
		if re.match('^border[a-z-]+radius', prop):
			self.border_radius(prop, value)
		elif prop == 'opacity': 
			self.opacity(prop, value)
		else:
			self.generic_builder(prop, value)

	def border_radius(self, prop, value):
		if isinstance(value, (int, float)):
			value = str(value) + self.units
			if 'top' in prop or 'bottom' in prop:
				hyphens = prop.split('-')
				coords = hyphens[1]+hyphens[2]
				
				declaration = {
				'-moz-border-radius-'+coords: value,
				'-webkit-'+prop: value ,
			 	prop: value 
				}
				
				self.declaration_builder(declaration)
			else:
				self.generic_builder(prop, value)
		else: 
			self.generic_builder(prop, value)
	
	def opacity(self, prop, value):	
		percent = str(int(value * 100))

		declaration = {
		'opacity': str(value),
		'-ms-filter': 'progid:DXImageTransform.Microsoft.Alpha(Opacity=' + percent + ')',
		'filter': 'alpha(opacity=' + percent + ')'
		}

		self.declaration_builder(declaration)

	def generic_builder(self, prop, value):
		declaration = {
		'-moz-' + prop: value,
		'-webkit-'+ prop: value,
		prop: value
		}
		
		self.declaration_builder(declaration)
	
	def declaration_builder(self, declarations):
		"""Generates a string of declarations.
		
		Sets self.declaration to a string representation of the dictionary, suitable for printing out in a CSS file.
		
		Args:
			declarations - A dictionary of properties and values, likely generated by a property method (opacity, border-radius, etc).
		
		"""
		for key,value in declarations.items():
			self.declaration += "%s: %s;\n" % (key, value)

op = CSSPrefix('opacity', 0.5)
print op.declaration